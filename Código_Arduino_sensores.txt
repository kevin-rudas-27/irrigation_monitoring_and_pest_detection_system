// Configuración de Blynk
#define BLYNK_TEMPLATE_ID "TMPL2Rw9fUfEn"
#define BLYNK_TEMPLATE_NAME "Proyecto"
#define BLYNK_AUTH_TOKEN "ag1kKxsx8MVmwH4ZACsce4Vycj7iuMhY"

// Librerias
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h> // uso de blynk
#include <DHT.h>  // humedad y temperatura ambiental

// Credenciales WiFi
char ssid[] = ""; // nombre de red
char pass[] = ""; // contraseña de red
char auth[] = BLYNK_AUTH_TOKEN;

// Pines virtuales Blynk
#define TEMP_AMB_VPIN V0
#define HUM_AMB_VPIN V1
#define NITROGENO_VPIN V2
#define FOSFORO_VPIN V3
#define POTASIO_VPIN V4
#define HUMEDAD_SUELO_VPIN V5
#define RELE_CONTROL_VPIN V6
#define RELE_STATUS_VPIN V7

// Configuración DHT11
#define DHTPIN 4  // pin GPIO4
#define DHTTIPO DHT11 // sensor
DHT dht(DHTPIN, DHTTIPO);

//Sensor NPK
#define SerialPort Serial2
uint8_t npkTabla[] = {0x01, 0x03, 0x00, 0x1E, 0x00, 0x03, 0x65, 0xCD};

//Sensor Suelo y Control Rele
const int sensorSueloPin = 34; // ADC1_CH6 (solo lectura)
const int pinRele = 19; // GPIO 19
bool releEstado = false;
bool releModoManual = false;
bool humedadSueloConectado = true;

//Variables
float hum_amb = 0;
float temp_amb = 0;
uint16_t nitrogeno = 0;
uint16_t fosforo = 0;
uint16_t potasio = 0;
float humedadSuelo = 0;
int lecturaRawSuelo = 0;

// Control de tiempo
unsigned long lastDHTRead = 0;
unsigned long lastNPKRead = 0;
unsigned long lastHumedadSueloRead = 0;
unsigned long lastSendBlynk = 0;

const unsigned long DHT_INTERVAL = 2000; // 2 seg
const unsigned long NPK_INTERVAL = 2000; // 2 seg
const unsigned long SUELO_INTERVAL = 2000; // 2 seg
const unsigned long BLYNK_INTERVAL = 3000; // 3 seg

void setup() {
  Serial.begin(115200); // baud monitor serie
  
  // inicializar sensores
  dht.begin();
  SerialPort.begin(4800, SERIAL_8N1, 16, 17); // RX=16, TX=17
  pinMode(pinRele, OUTPUT); // pin salida
  digitalWrite(pinRele, LOW); // rele apagado
  pinMode(sensorSueloPin, INPUT_PULLUP);

  //Conexion WiFi
  WiFi.begin(ssid, pass);
  Serial.println("===Conectando a WiFi===");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a WiFi");

  //Conexion a Blynk
  Blynk.begin(auth, ssid, pass);
  Serial.println("\n===Conectando a Blynk===");
  while (!Blynk.connected()) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a Blynk");
  Blynk.logEvent("sistema_online", "Sistema de monitoreo y riego conectado!");

  Serial.println("\nSistema de Monitoreo y Riego iniciado");

  delay(5000);
}

void loop() {
  unsigned long currentMillis = millis();
  Blynk.run();

  // Lectura de sensores
  if(currentMillis - lastDHTRead >= DHT_INTERVAL) {
    leerDHT();
    lastDHTRead = currentMillis;
  }

  if(currentMillis - lastNPKRead >= NPK_INTERVAL) {
    leerNPK();
    lastNPKRead = currentMillis;
  }

  if(currentMillis - lastHumedadSueloRead >= SUELO_INTERVAL) {
    leerHumedadSuelo();
    controlRele();
    lastHumedadSueloRead = currentMillis;
  }

  // Envio de datos
  if(currentMillis - lastSendBlynk >= BLYNK_INTERVAL) {
    imprimirEnviarDatos();
    lastSendBlynk = currentMillis;
  }

  delay(1500);
}

// Funcion control del rele + notificaciones
void setRele(bool estado) {
  if (releEstado != estado) {
    releEstado = estado;
    digitalWrite(pinRele, estado ? HIGH : LOW);

    // Notificacion a Blynk
    if (estado) {
      Blynk.logEvent("riego_activado", "Bomba de riego activada!");
    } else {
      Blynk.logEvent("riego_desantivado", "Bomba de riego detenida!");
    }
  }
  // Actualizar estado en Blynk
  Blynk.virtualWrite(RELE_STATUS_VPIN, releEstado ? 1 : 0);
}

// Funcion boton Blynk
BLYNK_WRITE(RELE_CONTROL_VPIN) {
  int value = param.asInt();
  releModoManual = (value == 1);
  setRele(value);
}

// Funcion DHT
void leerDHT() {
  Serial.println("\n-------Leyendo DHT11 Sensor-------");
  hum_amb = dht.readHumidity();
  temp_amb = dht.readTemperature();

  if (isnan(hum_amb) || isnan(temp_amb)) {
    Serial.println("Error lectura DHT11");
    hum_amb = -1;
    temp_amb = -1;
  }
}

// Funcion NPK
void leerNPK() {
  Serial.println("-------Leyendo NPK Sensor-------");
  // Envio de datos al NPK
  SerialPort.write(npkTabla, sizeof(npkTabla));
  Serial.print("Enviando: ");
  printFrame(npkTabla, 8);
  delay(100);

  if (SerialPort.available() >= 11) {
    // Leyendo la respuesta
    uint8_t npkRespuesta[11];
    SerialPort.readBytes(npkRespuesta, sizeof(npkRespuesta));
    Serial.print("Recibido: ");
    printFrame(npkRespuesta, 11);

    // Extrayendo valores N, P, K de la respuesta recibida
    nitrogeno = (npkRespuesta[3] << 8) | npkRespuesta[4];
    fosforo = (npkRespuesta[5] << 8) | npkRespuesta[6];
    potasio = (npkRespuesta[7] << 8) | npkRespuesta[8];
  } else {
    Serial.println("Error NPK: Sin respuesta");
    nitrogeno = fosforo = potasio = 0;
  }
}

// Función para imprimir tramas en hexadecimal
void printFrame(byte *frame, uint8_t len) {
  for (uint8_t i = 0; i < len; i++) {
    if (frame[i] < 0x10) Serial.print("0");
    Serial.print(frame[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
}

// Funcion Humedad del suelo
void leerHumedadSuelo() {
  Serial.println("-------Leyendo Humedad Suelo-------");
  lecturaRawSuelo = analogRead(sensorSueloPin); // Lee de 0 a 4095
  Serial.print("Valor Raw Suelo: ");
  Serial.println(lecturaRawSuelo);

  // Detectar si el sensor esta desconectado
  if (lecturaRawSuelo <= 100 || lecturaRawSuelo >= 4000) {
    humedadSueloConectado = false;
    humedadSuelo = -1;

    //Notificar solo en la primera deteccion
    static bool notificado = false;
    if (!notificado) {
      Serial.println("ALERTA: Sensor de humedad desconectado");
      Blynk.logEvent("sensor_desconectado", "Sensor de humedad del suelo desconectado");
      notificado = true;
    }
    return;
  }

  humedadSueloConectado = true;
  // Mapear: 3300 (seco) => 0%, 2100 (mojado) => 100%
  humedadSuelo = map(lecturaRawSuelo, 3300, 2100, 0, 100);
  humedadSuelo = constrain(humedadSuelo, 0, 100);
}

// Funcion modulo rele
void controlRele() {
  Serial.println("-------Control de Rele-------");

  // Forzar apagado si el sensor esta desconectado
  if (!releModoManual && !humedadSueloConectado) {
    setRele(false);
    return;
  }

  //Control automatico si el sensor esta conectado
  if (!releModoManual) {  // solo en modo automatico
    Serial.println("Modo Automatico");
    if (humedadSuelo < 40 && !releEstado) {
      setRele(true);
    } else if (humedadSuelo >= 60 && releEstado) {
      setRele(false);
    }
  }
  if (releModoManual == 1) Serial.println("Modo Manual");
}

// Envio e Impresion de datos
void imprimirEnviarDatos() {
  // Serial Monitor
  Serial.println("\n=====Datos Sensores Recibidos=====");
  Serial.print("Temperatura Ambiental: ");
  Serial.print(temp_amb);
  Serial.println("°C");
  Serial.print("Humedad Ambiental: ");
  Serial.print(hum_amb);
  Serial.println("%");

  Serial.print("Nitrogeno: ");
  Serial.println(nitrogeno);
  Serial.print("Fosforo: ");
  Serial.println(fosforo);
  Serial.print("Potasio: ");
  Serial.println(potasio);

  Serial.print("Humedad Suelo: ");
  Serial.print(humedadSuelo);
  Serial.println("%");

  Serial.print("Estado Riego: ");
  Serial.println(releEstado ? "Activado" : "Desactivado");
  Serial.println("_______________");

  // Blynk
  Blynk.virtualWrite(TEMP_AMB_VPIN, temp_amb);
  Blynk.virtualWrite(HUM_AMB_VPIN, hum_amb);
  Blynk.virtualWrite(NITROGENO_VPIN, nitrogeno);
  Blynk.virtualWrite(FOSFORO_VPIN, fosforo);
  Blynk.virtualWrite(POTASIO_VPIN, potasio);
  Blynk.virtualWrite(HUMEDAD_SUELO_VPIN, humedadSuelo);
}
