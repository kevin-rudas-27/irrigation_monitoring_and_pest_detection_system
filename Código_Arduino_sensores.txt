//Configuraci√≥n con las credenciales de Blynk
#define BLYNK_TEMPLATE_ID "TMPL2L7YZSNeS"
#define BLYNK_TEMPLATE_NAME "Proyecto"
#define BLYNK_AUTH_TOKEN "WIKUFd24YlRzIw56azdoZovxQctooCNb"
char auth[] = BLYNK_AUTH_TOKEN;

//librerias utilizadas
#include <HardwareSerial.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>

// Configuraci√≥n WiFi
char ssid[] = ""; //Nombre de la red
char pass[] = "";  //Contrase√±a de la red

// Configuraci√≥n DHT11
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Pines virtuales Blynk
#define TEMP_AMB_VPIN V0
#define HUM_AMB_VPIN V1
#define NITROGENO_VPIN V4
#define FOSFORO_VPIN V5
#define POTASIO_VPIN V6
#define HUMEDAD_SUELO_VPIN V2
#define RELE_CONTROL_VPIN  V3

// Control de la bomba
bool modoManualRele = false;    // false = autom√°tico, true = manual
bool estadoManualRele = false;  // estado deseado del rel√© desde Blynk

// Configuraci√≥n del puerto serial hardware (UART2)
HardwareSerial rs485(2);  // Usamos UART2

// Par√°metros del sensor NPK
const byte sensorAddress = 0x01;
const unsigned int baudRate = 4800;

// Direcciones de los registros (hexadecimal)
const uint16_t nitrogenoReg = 0x001E;
const uint16_t fosforoReg = 0x001F;
const uint16_t potasioReg = 0x0020;

// Buffer para comunicaci√≥n
byte requestFrame[8];
byte responseFrame[7];

// Variables para almacenar los valores NPK
uint16_t nitrogenoValor = 0;
uint16_t fosforoValor = 0;
uint16_t potasioValor = 0;

// Variables para control de tiempo
unsigned long lastDHTRead = 0;
const unsigned long DHT_INTERVAL = 2000;  // 2 segundos

// ========== CONFIGURACI√ìN PARA HUMEDAD DE SUELO ==========
const int sensorSueloPin = 34;   // Entrada anal√≥gica para sensor de humedad del suelo (solo lectura)
const int pinRele = 27;          // Salida digital para controlar rel√© (no usar GPIO4, 16, 17)

float humedadSuelo;
int lecturaRawSuelo;

// Inicializaci√≥n del controlador y otros parametros
void setup() {
  Serial.begin(115200); //informaci√≥n mediante monitor serial en PC
  rs485.begin(baudRate, SERIAL_8N1, 16, 17); // RX:16, TX:17 (pines comunes)
  dht.begin();

  // === CONFIGURACI√ìN PARA SENSOR DE HUMEDAD DE SUELO Y REL√â ===
  pinMode(pinRele, OUTPUT);
  digitalWrite(pinRele, LOW);  // Inicia con el rel√© apagado
  
  // Conexi√≥n WiFi y Blynk
  WiFi.begin(ssid, pass);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a WiFi!");
  
  Blynk.begin(auth, ssid, pass);
  Serial.println("Conectando a Blynk...");
  while (!Blynk.connected()) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado a Blynk!");
  
  Serial.println("\nIniciando sistema NPK con ESP32...");
  Serial.println("Configuracion RS485: 4800 baudios");
  
  delay(1000);
}

//Ejecucion del programa
void loop() {
  Blynk.run();  // Mantiene la conexi√≥n con Blynk
  
  // Lectura peri√≥dica del sensor DHT11
  if (millis() - lastDHTRead >= DHT_INTERVAL) {
    lastDHTRead = millis();
    
    //varibles de temperatura y humedad ambiental
    float hum_amb = dht.readHumidity();
    float temp_amb = dht.readTemperature();

    if (!isnan(hum_amb) && !isnan(temp_amb)) {
      Serial.print("Humedad: ");
      Serial.print(hum_amb);
      Serial.print("%, Temp: ");
      Serial.print(temp_amb);
      Serial.println("¬∞C");
      
      // Env√≠o de datos a Blynk
      Blynk.virtualWrite(HUM_AMB_VPIN, hum_amb);
      Blynk.virtualWrite(TEMP_AMB_VPIN, temp_amb);
    } else {
      Serial.println("Error lectura DHT11");
      Blynk.virtualWrite(HUM_AMB_VPIN, 0);
      Blynk.virtualWrite(TEMP_AMB_VPIN, 0.0);
    }
  }

  // Leer Nitr√≥geno
  if (readSensor(nitrogenoReg)) {
    nitrogenoValor = (responseFrame[3] << 8) | responseFrame[4];
    Serial.print("Nitrogeno: ");
    Serial.print(nitrogenoValor);
    Serial.println(" mg/kg");

    // ENVIAR A BLYNK
    Blynk.virtualWrite(NITROGENO_VPIN, nitrogenoValor);
  }
  delay(1000);

  // Leer F√≥sforo
  if (readSensor(fosforoReg)) {
    fosforoValor = (responseFrame[3] << 8) | responseFrame[4];
    Serial.print("Fosforo: ");
    Serial.print(fosforoValor);
    Serial.println(" mg/kg");

    // ENVIAR A BLYNK
    Blynk.virtualWrite(FOSFORO_VPIN, fosforoValor);
  }
  delay(1000);

  // Leer Potasio
  if (readSensor(potasioReg)) {
    potasioValor = (responseFrame[3] << 8) | responseFrame[4];
    Serial.print("Potasio: ");
    Serial.print(potasioValor);
    Serial.println(" mg/kg");

    // ENVIAR A BLYNK
    Blynk.virtualWrite(POTASIO_VPIN, potasioValor);
  }

  // === LLAMAR A LA LECTURA DE HUMEDAD DEL SUELO Y CONTROLAR REL√â ===
  leerHumedadSueloYControlarRele();

  delay(3000);  // Espera entre ciclos completos
  Serial.println("-----------------------");
}

// Funci√≥n para leer el sensor NPK
bool readSensor(uint16_t reg) {
  // Construir trama de solicitud
  requestFrame[0] = sensorAddress;       // Direcci√≥n
  requestFrame[1] = 0x03;                // Funci√≥n lectura
  requestFrame[2] = highByte(reg);       // Byte alto del registro
  requestFrame[3] = lowByte(reg);        // Byte bajo del registro
  requestFrame[4] = 0x00;                // Cantidad alta (1 registro)
  requestFrame[5] = 0x01;                // Cantidad baja
  uint16_t crc = calculateCRC(requestFrame, 6);
  requestFrame[6] = lowByte(crc);        // CRC bajo
  requestFrame[7] = highByte(crc);       // CRC alto

  // Enviar solicitud
  rs485.write(requestFrame, 8);
  rs485.flush();  // Esperar a que se complete la transmisi√≥n
  delay(100);     // Tiempo para respuesta

  // Recibir respuesta
  if (rs485.available() >= 7) {
    rs485.readBytes(responseFrame, 7);

    // Verificar CRC
    uint16_t recvCRC = (responseFrame[6] << 8) | responseFrame[5];
    uint16_t calcCRC = calculateCRC(responseFrame, 5);
    
    if (calcCRC == recvCRC) {
      return true;
    } else {
      Serial.print("Error CRC: Calculado=0x");
      Serial.print(calcCRC, HEX);
      Serial.print(" Recibido=0x");
      Serial.println(recvCRC, HEX);
      Blynk.virtualWrite(NITROGENO_VPIN, 0);
      Blynk.virtualWrite(FOSFORO_VPIN, 0);
      Blynk.virtualWrite(POTASIO_VPIN, 0);
    }
  } else {
    Serial.print("Error: Datos insuficientes (");
    Serial.print(rs485.available());
    Serial.println(" bytes)");
    Blynk.virtualWrite(NITROGENO_VPIN, 0);
    Blynk.virtualWrite(FOSFORO_VPIN, 0);
    Blynk.virtualWrite(POTASIO_VPIN, 0);
  }
  return false;
}

// Funci√≥n para calcular CRC (Modbus RTU)
uint16_t calculateCRC(byte *data, uint8_t len) {
  uint16_t crc = 0xFFFF;
  for (uint8_t pos = 0; pos < len; pos++) {
    crc ^= (uint16_t)data[pos];
    for (uint8_t i = 8; i != 0; i--) {
      if ((crc & 0x0001) != 0) {
        crc >>= 1;
        crc ^= 0xA001;
      } else {
        crc >>= 1;
      }
    }
  }
  return crc;
}

// Recepcion de valor boton encendido o apagado en Blynk
BLYNK_WRITE(RELE_CONTROL_VPIN) {
  int valor = param.asInt();  // 1 = ON, 0 = OFF

  modoManualRele = (valor == 1);      // Activar modo manual si se activa el bot√≥n
  estadoManualRele = (valor == 1);    // Estado del rel√© en modo manual

  Serial.print("üîß Modo manual activado desde Blynk: ");
  Serial.println(modoManualRele ? "ON" : "OFF");
}

// Humedad Suelo y Rele
void leerHumedadSueloYControlarRele() {
  lecturaRawSuelo = analogRead(sensorSueloPin);  // Valor 0‚Äì4095 en ESP32

  // Mapeo estimado 4050 (seco) - 1950 (mojado)
  Serial.print("Valor Raw: ");
  Serial.println(lecturaRawSuelo);
  humedadSuelo = map(lecturaRawSuelo, 4050, 1950, 0, 100);
  humedadSuelo = constrain(humedadSuelo, 0, 100);

  Serial.print("Humedad del suelo: ");
  Serial.print(humedadSuelo);
  Serial.println(" %");

  // Enviar a Blynk
  Blynk.virtualWrite(HUMEDAD_SUELO_VPIN, humedadSuelo);

  if (!modoManualRele) {
    // Modo autom√°tico
    if (humedadSuelo < 60) {
      digitalWrite(pinRele, HIGH);
      Serial.println("Rel√© ACTIVADO (autom√°tico)");
    } else {
      digitalWrite(pinRele, LOW);
      Serial.println("Rel√© DESACTIVADO (autom√°tico)");
    }
  } else {
    // Modo manual, respetar el estado solicitado por Blynk
    digitalWrite(pinRele, estadoManualRele ? HIGH : LOW);
    Serial.print("Rel√© en modo MANUAL: ");
    Serial.println(estadoManualRele ? "ON" : "OFF");
  }
}
